//! Generic asynchronous implementation.
//!
//! This module contains generic definitions for functions using arbitrary asynchronous runtimes.
//! The [`crossmist::tokio`] and [`crossmist::smol`] modules provides type and functions definitions
//! for their respective runtimes. You should probably use those.
//!
//!
//! ## Channels
//!
//! Asynchronous channels work just like synchronous channels except that you need to add `.await`
//! to each blocking call. Synchronous and asynchronous channels can be converted to each other.
//! This might be useful if you use tokio/smol in the parent process but use synchronous code in the
//! child. In this case, you would create a channel using [`crossmist::channel`] and convert one
//! side to an asynchronous one.
//!
//!
//! ## Processes
//!
//! To start a child process, you use any of the `spawn_tokio` and `spawn_smol` methods generated by
//! `#[func]`:
//!
//! ```ignore
//! #[func]
//! fn my_process() {
//!     ...
//! }
//!
//! let child = my_process.spawn_tokio().await?;
//! // let child = my_process.spawn_smol().await?;
//! ```
//!
//! Note that you can use these methods on both synchronous and asynchronous functions, e.g. the
//! following works too:
//!
//! ```ignore
//! #[func(tokio)]
//! async fn my_process() {
//!     ...
//! }
//!
//! let child = my_process.spawn_tokio().await?;
//! ```

use crate::{
    entry, imp,
    internals::{socketpair, SingleObjectReceiver, SingleObjectSender},
    subprocess, FnOnceObject, Object, Serializer,
};
use nix::libc::{pid_t, SOCK_NONBLOCK};
use std::future::Future;
use std::io::{Error, Result};
use std::marker::PhantomData;
use std::os::unix::{
    io::{AsRawFd, FromRawFd, IntoRawFd, RawFd},
    net::UnixStream,
};

/// Runtime-dependent parameters.
pub unsafe trait AsyncRuntime {
    /// A readable and writable Unix socket.
    type Stream: TryFrom<UnixStream, Error = Error> + Object + AsRawFd;

    /// Perform a blocking write.
    ///
    /// Calls `f`. If it returns `Err(WouldBlock)`, waits until the file descriptor is writable and
    /// retries. When the function returns anything other than `Err(WouldBlock)`, returns.
    fn blocking_write<T>(
        stream: &Self::Stream,
        f: impl FnMut() -> Result<T> + Send,
    ) -> impl Future<Output = Result<T>> + Send;

    /// Perform a blocking write.
    ///
    /// Calls `f`. If it returns `Err(WouldBlock)`, waits until the file descriptor is readable and
    /// retries. When the function returns anything other than `Err(WouldBlock)`, returns.
    fn blocking_read<T>(
        stream: &Self::Stream,
        f: impl FnMut() -> Result<T> + Send,
    ) -> impl Future<Output = Result<T>> + Send;
}

/// The transmitting side of a unidirectional channel.
///
/// `T` is the type of the objects this side sends via the channel and the other side receives.
#[derive(Object)]
pub struct Sender<Runtime: AsyncRuntime, T: Object> {
    fd: Runtime::Stream,
    marker: PhantomData<fn(T)>,
}

/// The receiving side of a unidirectional channel.
///
/// `T` is the type of the objects the other side sends via the channel and this side receives.
#[derive(Object)]
pub struct Receiver<Runtime: AsyncRuntime, T: Object> {
    fd: Runtime::Stream,
    marker: PhantomData<fn() -> T>,
}

/// A side of a bidirectional channel.
///
/// `S` is the type of the objects this side sends via the channel and the other side receives, `R`
/// is the type of the objects the other side sends via the channel and this side receives.
#[derive(Object)]
pub struct Duplex<Runtime: AsyncRuntime, S: Object, R: Object> {
    fd: Runtime::Stream,
    marker: PhantomData<fn(S) -> R>,
}

/// Create a unidirectional channel.
pub fn channel<Runtime: AsyncRuntime, T: Object>(
) -> Result<(Sender<Runtime, T>, Receiver<Runtime, T>)> {
    let (tx, rx) = duplex::<Runtime, T, T>()?;
    Ok((tx.into_sender(), rx.into_receiver()))
}

/// Create a bidirectional channel.
pub fn duplex<Runtime: AsyncRuntime, A: Object, B: Object>(
) -> Result<(Duplex<Runtime, A, B>, Duplex<Runtime, B, A>)> {
    let (tx, rx) = socketpair(SOCK_NONBLOCK)?;
    unsafe {
        Ok((
            Duplex::from_unix_stream(tx.try_into()?),
            Duplex::from_unix_stream(rx.try_into()?),
        ))
    }
}

impl<Runtime: AsyncRuntime, T: Object> Sender<Runtime, T> {
    unsafe fn from_unix_stream(fd: Runtime::Stream) -> Self {
        Sender {
            fd,
            marker: PhantomData,
        }
    }

    /// Send a value to the other side.
    pub async fn send(&mut self, value: &T) -> Result<()> {
        let mut sender = SingleObjectSender::new(self.fd.as_raw_fd(), value);
        Runtime::blocking_write(&self.fd, || sender.send_next()).await
    }
}

impl<Runtime: AsyncRuntime, T: Object> TryFrom<crate::Sender<T>> for Sender<Runtime, T> {
    type Error = std::io::Error;
    fn try_from(value: crate::Sender<T>) -> Result<Self> {
        unsafe {
            let fd = value.into_raw_fd();
            entry::enable_nonblock(fd)?;
            Ok(Self::from_unix_stream(
                std::os::unix::net::UnixStream::from_raw_fd(fd).try_into()?,
            ))
        }
    }
}
impl<Runtime: AsyncRuntime, T: Object> From<Sender<Runtime, T>> for crate::Sender<T> {
    fn from(value: Sender<Runtime, T>) -> Self {
        unsafe {
            let fd = value.into_raw_fd();
            entry::disable_nonblock(fd).expect("Failed to reset O_NONBLOCK");
            Self::from_raw_fd(fd)
        }
    }
}

impl<Runtime: AsyncRuntime, T: Object> AsRawFd for Sender<Runtime, T> {
    fn as_raw_fd(&self) -> RawFd {
        self.fd.as_raw_fd()
    }
}

impl<Runtime: AsyncRuntime, T: Object> IntoRawFd for Sender<Runtime, T> {
    fn into_raw_fd(self) -> RawFd {
        let fd = self.as_raw_fd();
        std::mem::forget(self);
        fd
    }
}

impl<Runtime: AsyncRuntime, T: Object> Receiver<Runtime, T> {
    unsafe fn from_unix_stream(fd: Runtime::Stream) -> Self {
        Receiver {
            fd,
            marker: PhantomData,
        }
    }

    /// Receive a value from the other side.
    ///
    /// Returns `Ok(None)` if the other side has dropped the channel.
    pub async fn recv(&mut self) -> Result<Option<T>> {
        let mut receiver = unsafe { SingleObjectReceiver::new(self.fd.as_raw_fd()) };
        Runtime::blocking_read(&self.fd, || receiver.recv_next()).await
    }
}

impl<Runtime: AsyncRuntime, T: Object> TryFrom<crate::Receiver<T>> for Receiver<Runtime, T> {
    type Error = std::io::Error;
    fn try_from(value: crate::Receiver<T>) -> Result<Self> {
        unsafe {
            let fd = value.into_raw_fd();
            entry::enable_nonblock(fd)?;
            Ok(Self::from_unix_stream(
                std::os::unix::net::UnixStream::from_raw_fd(fd).try_into()?,
            ))
        }
    }
}
impl<Runtime: AsyncRuntime, T: Object> From<Receiver<Runtime, T>> for crate::Receiver<T> {
    fn from(value: Receiver<Runtime, T>) -> Self {
        unsafe {
            let fd = value.into_raw_fd();
            entry::disable_nonblock(fd).expect("Failed to reset O_NONBLOCK");
            Self::from_raw_fd(fd)
        }
    }
}

impl<Runtime: AsyncRuntime, T: Object> AsRawFd for Receiver<Runtime, T> {
    fn as_raw_fd(&self) -> RawFd {
        self.fd.as_raw_fd()
    }
}

impl<Runtime: AsyncRuntime, T: Object> IntoRawFd for Receiver<Runtime, T> {
    fn into_raw_fd(self) -> RawFd {
        let fd = self.as_raw_fd();
        std::mem::forget(self);
        fd
    }
}

impl<Runtime: AsyncRuntime, S: Object, R: Object> Duplex<Runtime, S, R> {
    unsafe fn from_unix_stream(fd: Runtime::Stream) -> Self {
        Duplex {
            fd,
            marker: PhantomData,
        }
    }

    /// Send a value to the other side.
    pub async fn send(&mut self, value: &S) -> Result<()> {
        let mut sender = SingleObjectSender::new(self.fd.as_raw_fd(), value);
        Runtime::blocking_write(&self.fd, || sender.send_next()).await
    }

    /// Receive a value from the other side.
    ///
    /// Returns `Ok(None)` if the other side has dropped the channel.
    pub async fn recv(&mut self) -> Result<Option<R>> {
        let mut receiver = unsafe { SingleObjectReceiver::new(self.fd.as_raw_fd()) };
        Runtime::blocking_read(&self.fd, || receiver.recv_next()).await
    }

    /// Send a value from the other side and wait for a response immediately.
    ///
    /// If the other side closes the channel before responding, an error is returned.
    pub async fn request(&mut self, value: &S) -> Result<R> {
        self.send(value).await?;
        self.recv().await?.ok_or_else(|| {
            std::io::Error::new(
                std::io::ErrorKind::UnexpectedEof,
                "The subprocess exitted before responding to the request",
            )
        })
    }

    fn into_sender(self) -> Sender<Runtime, R> {
        unsafe { Sender::from_unix_stream(self.fd) }
    }

    fn into_receiver(self) -> Receiver<Runtime, R> {
        unsafe { Receiver::from_unix_stream(self.fd) }
    }
}

impl<Runtime: AsyncRuntime, S: Object, R: Object> TryFrom<crate::Duplex<S, R>>
    for Duplex<Runtime, S, R>
{
    type Error = std::io::Error;
    fn try_from(value: crate::Duplex<S, R>) -> Result<Self> {
        unsafe {
            let fd = value.into_raw_fd();
            entry::enable_nonblock(fd)?;
            Ok(Self::from_unix_stream(
                std::os::unix::net::UnixStream::from_raw_fd(fd).try_into()?,
            ))
        }
    }
}
impl<Runtime: AsyncRuntime, S: Object, R: Object> From<Duplex<Runtime, S, R>>
    for crate::Duplex<S, R>
{
    fn from(value: Duplex<Runtime, S, R>) -> Self {
        unsafe {
            let fd = value.into_raw_fd();
            entry::disable_nonblock(fd).expect("Failed to reset O_NONBLOCK");
            Self::from_raw_fd(fd)
        }
    }
}

impl<Runtime: AsyncRuntime, S: Object, R: Object> AsRawFd for Duplex<Runtime, S, R> {
    fn as_raw_fd(&self) -> RawFd {
        self.fd.as_raw_fd()
    }
}

impl<Runtime: AsyncRuntime, S: Object, R: Object> IntoRawFd for Duplex<Runtime, S, R> {
    fn into_raw_fd(self) -> RawFd {
        let fd = self.as_raw_fd();
        std::mem::forget(self);
        fd
    }
}

/// A subprocess.
pub struct Child<Runtime: AsyncRuntime, T: Object> {
    proc_pid: nix::unistd::Pid,
    output_rx: Receiver<Runtime, T>,
}

impl<Runtime: AsyncRuntime, T: Object> Child<Runtime, T> {
    fn new(proc_pid: nix::unistd::Pid, output_rx: Receiver<Runtime, T>) -> Self {
        Child {
            proc_pid,
            output_rx,
        }
    }

    /// Terminate the process immediately.
    pub fn kill(&mut self) -> Result<()> {
        nix::sys::signal::kill(self.proc_pid, nix::sys::signal::Signal::SIGKILL)?;
        Ok(())
    }

    /// Get ID of the process.
    pub fn id(&self) -> pid_t {
        self.proc_pid.as_raw()
    }

    /// Wait for the process to finish and obtain the value it returns.
    ///
    /// An error is returned if the process panics or is terminated. An error is also delivered if
    /// it exits via [`std::process::exit`] or alike instead of returning a value, unless the return
    /// type is `()`. In that case, `Ok(())` is returned.
    pub async fn join(mut self) -> Result<T> {
        let mut value = self.output_rx.recv().await?;
        // Avoid receiving a void result -- merely dropping the channel on the other side suffices
        if let Some(void) = imp::if_void::<T>() {
            // The value should be None at this moment
            value = Some(void);
        }
        // This is synchronous, but should be really fast
        let status = nix::sys::wait::waitpid(self.proc_pid, None)?;
        if let nix::sys::wait::WaitStatus::Exited(_, 0) = status {
            value.ok_or_else(|| {
                std::io::Error::new(
                    std::io::ErrorKind::Other,
                    "The subprocess terminated without returning a value",
                )
            })
        } else {
            Err(std::io::Error::new(
                std::io::ErrorKind::Other,
                format!(
                    "The subprocess did not terminate successfully: {:?}",
                    status
                ),
            ))
        }
    }
}

pub(crate) async unsafe fn spawn<Runtime: AsyncRuntime, T: Object>(
    entry: Box<dyn FnOnceObject<(RawFd,), Output = i32>>,
) -> Result<Child<Runtime, T>> {
    imp::perform_sanity_checks();

    let mut s = Serializer::new();
    s.serialize(&entry);

    let fds = s.drain_handles();

    let (mut local, child) = duplex::<Runtime, (Vec<u8>, Vec<RawFd>), T>()?;
    let pid = subprocess::_spawn_child(crate::Duplex::from(child), &fds)?;
    local.send(&(s.into_vec(), fds)).await?;

    Ok(Child::new(pid, local.into_receiver()))
}
